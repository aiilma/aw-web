{"ast":null,"code":"import * as types from \"./types\";\nexport const login = data => {\n  // if (data.success) {\n  const user = data.user;\n  let userData = {\n    user_id: user.user_id,\n    steamid: user.steamid,\n    nickname: user.nickname,\n    avatar: user.avatar,\n    balance: user.balance,\n    group: user.group,\n    timestamp: new Date().toString()\n  };\n  let authData = {\n    isAuthenticated: true,\n    token: data.token,\n    user: userData\n  }; // save app state with user date in local storage\n\n  localStorage[\"user\"] = JSON.stringify(authData);\n  return {\n    type: types.AUTH_LOGIN,\n    payload: authData\n  }; // } else alert(\"failed\");\n};\nexport const logout = () => {\n  // save app state with user date in local storage\n  let authData = {\n    isAuthenticated: false,\n    token: null,\n    user: {}\n  };\n  localStorage[\"user\"] = JSON.stringify(authData);\n  return {\n    type: types.AUTH_LOGOUT,\n    payload: authData\n  };\n};\nexport const setUser = user => {\n  return {\n    type: types.AUTH_SET_USER,\n    payload: user\n  };\n};","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/ducks/auth/actions.js"],"names":["types","login","data","user","userData","user_id","steamid","nickname","avatar","balance","group","timestamp","Date","toString","authData","isAuthenticated","token","localStorage","JSON","stringify","type","AUTH_LOGIN","payload","logout","AUTH_LOGOUT","setUser","AUTH_SET_USER"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC3B;AAD2B,QAEpBC,IAFoB,GAEZD,IAFY,CAEpBC,IAFoB;AAG3B,MAAIC,QAAQ,GAAG;AACXC,IAAAA,OAAO,EAAEF,IAAI,CAACE,OADH;AAEXC,IAAAA,OAAO,EAAEH,IAAI,CAACG,OAFH;AAGXC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAHJ;AAIXC,IAAAA,MAAM,EAAEL,IAAI,CAACK,MAJF;AAKXC,IAAAA,OAAO,EAAEN,IAAI,CAACM,OALH;AAMXC,IAAAA,KAAK,EAAEP,IAAI,CAACO,KAND;AAOXC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,QAAX;AAPA,GAAf;AASA,MAAIC,QAAQ,GAAG;AACXC,IAAAA,eAAe,EAAE,IADN;AAEXC,IAAAA,KAAK,EAAEd,IAAI,CAACc,KAFD;AAGXb,IAAAA,IAAI,EAAEC;AAHK,GAAf,CAZ2B,CAkB3B;;AACAa,EAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuBC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAvB;AACA,SAAO;AACHM,IAAAA,IAAI,EAAEpB,KAAK,CAACqB,UADT;AAEHC,IAAAA,OAAO,EAAER;AAFN,GAAP,CApB2B,CAwB3B;AACH,CAzBM;AA2BP,OAAO,MAAMS,MAAM,GAAG,MAAM;AACxB;AACA,MAAIT,QAAQ,GAAG;AACXC,IAAAA,eAAe,EAAE,KADN;AAEXC,IAAAA,KAAK,EAAE,IAFI;AAGXb,IAAAA,IAAI,EAAE;AAHK,GAAf;AAMAc,EAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuBC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAvB;AACA,SAAO;AACHM,IAAAA,IAAI,EAAEpB,KAAK,CAACwB,WADT;AAEHF,IAAAA,OAAO,EAAER;AAFN,GAAP;AAIH,CAbM;AAeP,OAAO,MAAMW,OAAO,GAAItB,IAAD,IAAU;AAC7B,SAAO;AACHiB,IAAAA,IAAI,EAAEpB,KAAK,CAAC0B,aADT;AAEHJ,IAAAA,OAAO,EAAEnB;AAFN,GAAP;AAIH,CALM","sourcesContent":["import * as types from \"./types\";\r\n\r\nexport const login = (data) => {\r\n    // if (data.success) {\r\n    const {user} = data\r\n    let userData = {\r\n        user_id: user.user_id,\r\n        steamid: user.steamid,\r\n        nickname: user.nickname,\r\n        avatar: user.avatar,\r\n        balance: user.balance,\r\n        group: user.group,\r\n        timestamp: new Date().toString()\r\n    };\r\n    let authData = {\r\n        isAuthenticated: true,\r\n        token: data.token,\r\n        user: userData\r\n    }\r\n\r\n    // save app state with user date in local storage\r\n    localStorage[\"user\"] = JSON.stringify(authData);\r\n    return {\r\n        type: types.AUTH_LOGIN,\r\n        payload: authData\r\n    }\r\n    // } else alert(\"failed\");\r\n}\r\n\r\nexport const logout = () => {\r\n    // save app state with user date in local storage\r\n    let authData = {\r\n        isAuthenticated: false,\r\n        token: null,\r\n        user: {}\r\n    }\r\n\r\n    localStorage[\"user\"] = JSON.stringify(authData);\r\n    return {\r\n        type: types.AUTH_LOGOUT,\r\n        payload: authData\r\n    }\r\n}\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: types.AUTH_SET_USER,\r\n        payload: user,\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}