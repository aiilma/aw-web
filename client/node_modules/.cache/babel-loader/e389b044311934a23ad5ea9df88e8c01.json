{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport React, { Component } from 'react';\nimport { withFormik } from 'formik';\nimport { connect } from \"react-redux\";\nimport { checkOnMax, checkOnMin, checkOnRequired } from \"../../../store/utils/form_helpers\";\nimport { clearCompForm, fetchCompForm } from \"../../../store/ducks/comp-order-form/actions\";\nimport OrderForm from \"./Form\";\n\nconst getDefaultValues = (_ref) => {\n  let typeVariant = _ref.typeVariant,\n      ph = _ref.ph,\n      state = _objectWithoutProperties(_ref, [\"typeVariant\", \"ph\"]);\n\n  let values = {\n    typeVariant: typeVariant === 0 ? '' : typeVariant === 1 ? \"long\" : \"short\"\n  }; // inputs\n\n  Object.keys(ph).forEach(keyName => {\n    values[keyName] = '';\n  });\n  return values;\n};\n\nconst mapStateToProps = state => ({\n  orderFormData: state.compOrderForm\n});\n\nconst MyEnhancedForm = withFormik({\n  mapPropsToValues: props => getDefaultValues(props.orderFormData),\n  // Custom sync validation\n  validate: (values, _ref2) => {\n    let _ref2$orderFormData = _ref2.orderFormData,\n        ph = _ref2$orderFormData.ph,\n        typeVariant = _ref2$orderFormData.typeVariant,\n        props = _objectWithoutProperties(_ref2, [\"orderFormData\"]);\n\n    const errors = {};\n    const rules = {};\n    Object.keys(ph).forEach(keyName => {\n      rules[keyName] = ph[keyName].rules;\n    });\n    if (typeVariant === 0 && !values.typeVariant) errors[\"typeVariant\"] = \"Required\";\n    Object.keys(rules).forEach(keyName => {\n      if (/required/ig.test(rules[keyName]) && !checkOnRequired(values[keyName])) {\n        errors[keyName] = 'Required';\n      }\n\n      if (/min:\\d{1,2}/ig.test(rules[keyName])) {\n        let rule = rules[keyName].match(/min:\\d{1,2}/ig)[0];\n        let limit = +rule.match(/\\d+/ig)[0];\n\n        if (!checkOnMin(values[keyName], limit)) {\n          errors[keyName] = `Minimum length is ${limit}`;\n        }\n      }\n\n      if (/max:\\d{1,2}/ig.test(rules[keyName])) {\n        let rule = rules[keyName].match(/max:\\d{1,2}/ig)[0];\n        let limit = +rule.match(/\\d+/ig)[0];\n\n        if (!checkOnMax(values[keyName], limit)) {\n          errors[keyName] = `Maximum length is ${limit}`;\n        }\n      }\n    });\n    return errors;\n  },\n  handleSubmit: (values, _ref3) => {\n    let setSubmitting = _ref3.setSubmitting,\n        props = _objectWithoutProperties(_ref3, [\"setSubmitting\"]);\n\n    setSubmitting(true);\n    console.log(JSON.stringify(values, null, 2));\n    setSubmitting(false);\n    props.props.history.push(`${props.props.location.pathname}/success`);\n  },\n  // enableReinitialize: true,\n  displayName: 'OrderForm'\n})(OrderForm);\nexport default connect(mapStateToProps, {\n  fetchCompForm,\n  clearCompForm\n})(MyEnhancedForm);","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/CompOrderForm/Container.js"],"names":["React","Component","withFormik","connect","checkOnMax","checkOnMin","checkOnRequired","clearCompForm","fetchCompForm","OrderForm","getDefaultValues","typeVariant","ph","state","values","Object","keys","forEach","keyName","mapStateToProps","orderFormData","compOrderForm","MyEnhancedForm","mapPropsToValues","props","validate","errors","rules","test","rule","match","limit","handleSubmit","setSubmitting","console","log","JSON","stringify","history","push","location","pathname","displayName"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {withFormik} from 'formik';\r\nimport {connect} from \"react-redux\";\r\nimport {checkOnMax, checkOnMin, checkOnRequired} from \"../../../store/utils/form_helpers\";\r\nimport {clearCompForm, fetchCompForm} from \"../../../store/ducks/comp-order-form/actions\";\r\nimport OrderForm from \"./Form\";\r\n\r\nconst getDefaultValues = ({typeVariant, ph, ...state}) => {\r\n    let values = {\r\n        typeVariant: typeVariant === 0 ? '' : typeVariant === 1 ? \"long\" : \"short\"\r\n    }\r\n\r\n    // inputs\r\n    Object.keys(ph).forEach(keyName => {\r\n        values[keyName] = ''\r\n    })\r\n\r\n    return values\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    orderFormData: state.compOrderForm\r\n})\r\n\r\nconst MyEnhancedForm = withFormik({\r\n    mapPropsToValues: (props) => (getDefaultValues(props.orderFormData)),\r\n\r\n    // Custom sync validation\r\n    validate: (values, {orderFormData: {ph, typeVariant}, ...props}) => {\r\n        const errors = {};\r\n        const rules = {}\r\n\r\n        Object.keys(ph).forEach(keyName => {\r\n            rules[keyName] = ph[keyName].rules\r\n        })\r\n\r\n        if (typeVariant === 0 && !values.typeVariant) errors[\"typeVariant\"] = \"Required\"\r\n\r\n        Object.keys(rules).forEach(keyName => {\r\n            if (/required/ig.test(rules[keyName]) && !checkOnRequired(values[keyName])) {\r\n                errors[keyName] = 'Required'\r\n            }\r\n            if (/min:\\d{1,2}/ig.test(rules[keyName])) {\r\n                let rule = rules[keyName].match(/min:\\d{1,2}/ig)[0]\r\n                let limit = +rule.match(/\\d+/ig)[0]\r\n                if (!checkOnMin(values[keyName], limit)) {\r\n                    errors[keyName] = `Minimum length is ${limit}`\r\n                }\r\n            }\r\n            if (/max:\\d{1,2}/ig.test(rules[keyName])) {\r\n                let rule = rules[keyName].match(/max:\\d{1,2}/ig)[0]\r\n                let limit = +rule.match(/\\d+/ig)[0]\r\n                if (!checkOnMax(values[keyName], limit)) {\r\n                    errors[keyName] = `Maximum length is ${limit}`\r\n                }\r\n            }\r\n        })\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, {setSubmitting, ...props}) => {\r\n        setSubmitting(true);\r\n        console.log(JSON.stringify(values, null, 2));\r\n        setSubmitting(false);\r\n        props.props.history.push(`${props.props.location.pathname}/success`)\r\n    },\r\n\r\n    // enableReinitialize: true,\r\n\r\n    displayName: 'OrderForm',\r\n})(OrderForm)\r\nexport default connect(mapStateToProps, {fetchCompForm, clearCompForm})(MyEnhancedForm)"]},"metadata":{},"sourceType":"module"}