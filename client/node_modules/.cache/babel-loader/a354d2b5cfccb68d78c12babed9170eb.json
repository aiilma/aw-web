{"ast":null,"code":"import { fetch } from \"../utils\";\nconst baseUrl = typeof document === \"undefined\" ? \"http://localhost:8000/api\" : \"/api\";\n\nconst apiService = () => next => action => {\n  const result = next(action);\n\n  if (!action.meta || !action.meta.async) {\n    return result;\n  }\n\n  const _action$meta = action.meta,\n        path = _action$meta.path,\n        _action$meta$method = _action$meta.method,\n        method = _action$meta$method === void 0 ? \"GET\" : _action$meta$method,\n        body = _action$meta.body;\n\n  if (!path) {\n    throw new Error(`'path' not specified for async action ${action.type}`);\n  }\n\n  const url = `${baseUrl}${path}`;\n  return fetch(url, method, body).then(res => handleResponse(res, action, next), err => handleErrors(err, action, next));\n};\n\nexport default apiService;\n\nfunction handleErrors(err, action, next) {\n  next({\n    type: `${action.type}_FAILED`,\n    payload: err.response || err,\n    meta: action.meta\n  });\n  console.log(err);\n  return Promise.reject(err);\n}\n\nfunction handleResponse(res, action, next) {\n  next({\n    type: `${action.type}_COMPLETED`,\n    payload: res,\n    meta: action.meta\n  });\n  return res;\n}","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/middlewares/apiService.js"],"names":["fetch","baseUrl","document","apiService","next","action","result","meta","async","path","method","body","Error","type","url","then","res","handleResponse","err","handleErrors","payload","response","console","log","Promise","reject"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,UAApB;AAEA,MAAMC,OAAO,GAAG,OAAOC,QAAP,KAAoB,WAApB,GAAkC,2BAAlC,GAAgE,MAAhF;;AAEA,MAAMC,UAAU,GAAG,MAAOC,IAAD,IAAWC,MAAD,IAAY;AAC3C,QAAMC,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAnB;;AACA,MAAI,CAACA,MAAM,CAACE,IAAR,IAAgB,CAACF,MAAM,CAACE,IAAP,CAAYC,KAAjC,EAAwC;AACpC,WAAOF,MAAP;AACH;;AAJ0C,uBAMND,MAAM,CAACE,IAND;AAAA,QAMpCE,IANoC,gBAMpCA,IANoC;AAAA,2CAM9BC,MAN8B;AAAA,QAM9BA,MAN8B,oCAMrB,KANqB;AAAA,QAMdC,IANc,gBAMdA,IANc;;AAQ3C,MAAI,CAACF,IAAL,EAAW;AACP,UAAM,IAAIG,KAAJ,CAAW,yCAAwCP,MAAM,CAACQ,IAAK,EAA/D,CAAN;AACH;;AAED,QAAMC,GAAG,GAAI,GAAEb,OAAQ,GAAEQ,IAAK,EAA9B;AAEA,SAAOT,KAAK,CAACc,GAAD,EAAMJ,MAAN,EAAcC,IAAd,CAAL,CAAyBI,IAAzB,CACHC,GAAG,IAAIC,cAAc,CAACD,GAAD,EAAMX,MAAN,EAAcD,IAAd,CADlB,EAEHc,GAAG,IAAIC,YAAY,CAACD,GAAD,EAAMb,MAAN,EAAcD,IAAd,CAFhB,CAAP;AAIH,CAlBD;;AAoBA,eAAeD,UAAf;;AAEA,SAASgB,YAAT,CAAsBD,GAAtB,EAA2Bb,MAA3B,EAAmCD,IAAnC,EAAyC;AACrCA,EAAAA,IAAI,CAAC;AACDS,IAAAA,IAAI,EAAG,GAAER,MAAM,CAACQ,IAAK,SADpB;AAEDO,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,IAAgBH,GAFxB;AAGDX,IAAAA,IAAI,EAAEF,MAAM,CAACE;AAHZ,GAAD,CAAJ;AAMAe,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,SAAOM,OAAO,CAACC,MAAR,CAAeP,GAAf,CAAP;AACH;;AAED,SAASD,cAAT,CAAwBD,GAAxB,EAA6BX,MAA7B,EAAqCD,IAArC,EAA2C;AACvCA,EAAAA,IAAI,CAAC;AACDS,IAAAA,IAAI,EAAG,GAAER,MAAM,CAACQ,IAAK,YADpB;AAEDO,IAAAA,OAAO,EAAEJ,GAFR;AAGDT,IAAAA,IAAI,EAAEF,MAAM,CAACE;AAHZ,GAAD,CAAJ;AAMA,SAAOS,GAAP;AACH","sourcesContent":["import {fetch} from \"../utils\";\r\n\r\nconst baseUrl = typeof document === \"undefined\" ? \"http://localhost:8000/api\" : \"/api\";\r\n\r\nconst apiService = () => (next) => (action) => {\r\n    const result = next(action);\r\n    if (!action.meta || !action.meta.async) {\r\n        return result;\r\n    }\r\n\r\n    const {path, method = \"GET\", body} = action.meta;\r\n\r\n    if (!path) {\r\n        throw new Error(`'path' not specified for async action ${action.type}`);\r\n    }\r\n\r\n    const url = `${baseUrl}${path}`;\r\n\r\n    return fetch(url, method, body).then(\r\n        res => handleResponse(res, action, next),\r\n        err => handleErrors(err, action, next),\r\n    );\r\n};\r\n\r\nexport default apiService;\r\n\r\nfunction handleErrors(err, action, next) {\r\n    next({\r\n        type: `${action.type}_FAILED`,\r\n        payload: err.response || err,\r\n        meta: action.meta,\r\n    });\r\n\r\n    console.log(err)\r\n    return Promise.reject(err);\r\n}\r\n\r\nfunction handleResponse(res, action, next) {\r\n    next({\r\n        type: `${action.type}_COMPLETED`,\r\n        payload: res,\r\n        meta: action.meta,\r\n    });\r\n\r\n    return res;\r\n}"]},"metadata":{},"sourceType":"module"}