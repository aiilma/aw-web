{"ast":null,"code":"import { loginAC, logoutAC, setUserAC } from \"./actions\";\n\nconst login = data => {\n  // if (data.success) {\n  const user = data.user;\n  let userData = {\n    user_id: user.user_id,\n    steamid: user.steamid,\n    nickname: user.nickname,\n    avatar: user.avatar,\n    balance: user.balance,\n    group: user.group,\n    timestamp: new Date().toString()\n  };\n  let authData = {\n    isAuthenticated: true,\n    token: data.token,\n    user: userData\n  }; // save app state with user date in local storage\n\n  localStorage[\"user\"] = JSON.stringify(authData);\n  return loginAC(authData); // } else alert(\"failed\");\n};\n\nconst logout = () => {\n  // save app state with user date in local storage\n  let authData = {\n    isAuthenticated: false,\n    token: null,\n    user: {}\n  };\n  localStorage[\"user\"] = JSON.stringify(authData);\n  return logoutAC(authData);\n};\n\nconst setLocalStorageUser = () => {\n  let userStr = localStorage[\"user\"];\n  let user = JSON.parse(userStr);\n  return setUserAC(user);\n};\n\nexport { login, logout, setLocalStorageUser };","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/ducks/auth/operations.js"],"names":["loginAC","logoutAC","setUserAC","login","data","user","userData","user_id","steamid","nickname","avatar","balance","group","timestamp","Date","toString","authData","isAuthenticated","token","localStorage","JSON","stringify","logout","setLocalStorageUser","userStr","parse"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA2C,WAA3C;;AAEA,MAAMC,KAAK,GAAIC,IAAD,IAAU;AACpB;AADoB,QAEbC,IAFa,GAELD,IAFK,CAEbC,IAFa;AAGpB,MAAIC,QAAQ,GAAG;AACXC,IAAAA,OAAO,EAAEF,IAAI,CAACE,OADH;AAEXC,IAAAA,OAAO,EAAEH,IAAI,CAACG,OAFH;AAGXC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAHJ;AAIXC,IAAAA,MAAM,EAAEL,IAAI,CAACK,MAJF;AAKXC,IAAAA,OAAO,EAAEN,IAAI,CAACM,OALH;AAMXC,IAAAA,KAAK,EAAEP,IAAI,CAACO,KAND;AAOXC,IAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,QAAX;AAPA,GAAf;AASA,MAAIC,QAAQ,GAAG;AACXC,IAAAA,eAAe,EAAE,IADN;AAEXC,IAAAA,KAAK,EAAEd,IAAI,CAACc,KAFD;AAGXb,IAAAA,IAAI,EAAEC;AAHK,GAAf,CAZoB,CAkBpB;;AACAa,EAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuBC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAvB;AACA,SAAOhB,OAAO,CAACgB,QAAD,CAAd,CApBoB,CAqBpB;AACH,CAtBD;;AAwBA,MAAMM,MAAM,GAAG,MAAM;AACjB;AACA,MAAIN,QAAQ,GAAG;AACXC,IAAAA,eAAe,EAAE,KADN;AAEXC,IAAAA,KAAK,EAAE,IAFI;AAGXb,IAAAA,IAAI,EAAE;AAHK,GAAf;AAMAc,EAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuBC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAvB;AACA,SAAOf,QAAQ,CAACe,QAAD,CAAf;AACH,CAVD;;AAYA,MAAMO,mBAAmB,GAAG,MAAM;AAC9B,MAAIC,OAAO,GAAGL,YAAY,CAAC,MAAD,CAA1B;AACA,MAAId,IAAI,GAAGe,IAAI,CAACK,KAAL,CAAWD,OAAX,CAAX;AACA,SAAOtB,SAAS,CAACG,IAAD,CAAhB;AACH,CAJD;;AAOA,SACIF,KADJ,EACWmB,MADX,EACmBC,mBADnB","sourcesContent":["import {loginAC, logoutAC, setUserAC} from \"./actions\";\r\n\r\nconst login = (data) => {\r\n    // if (data.success) {\r\n    const {user} = data\r\n    let userData = {\r\n        user_id: user.user_id,\r\n        steamid: user.steamid,\r\n        nickname: user.nickname,\r\n        avatar: user.avatar,\r\n        balance: user.balance,\r\n        group: user.group,\r\n        timestamp: new Date().toString()\r\n    };\r\n    let authData = {\r\n        isAuthenticated: true,\r\n        token: data.token,\r\n        user: userData\r\n    }\r\n\r\n    // save app state with user date in local storage\r\n    localStorage[\"user\"] = JSON.stringify(authData);\r\n    return loginAC(authData)\r\n    // } else alert(\"failed\");\r\n}\r\n\r\nconst logout = () => {\r\n    // save app state with user date in local storage\r\n    let authData = {\r\n        isAuthenticated: false,\r\n        token: null,\r\n        user: {}\r\n    }\r\n\r\n    localStorage[\"user\"] = JSON.stringify(authData);\r\n    return logoutAC(authData)\r\n}\r\n\r\nconst setLocalStorageUser = () => {\r\n    let userStr = localStorage[\"user\"];\r\n    let user = JSON.parse(userStr);\r\n    return setUserAC(user)\r\n}\r\n\r\n\r\nexport {\r\n    login, logout, setLocalStorageUser\r\n}"]},"metadata":{},"sourceType":"module"}