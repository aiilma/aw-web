{"ast":null,"code":"import axios from 'axios';\nimport store from \"../store\";\nimport * as actions from \"../ducks/auth/actions\";\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\n\nif (token) {\n  axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n}\n\nconst fetch = (url, method, body) => {\n  const options = {\n    method,\n    headers: requestHeaders()\n  };\n  console.log(headers); // if (method === \"POST\") {\n  //     return axios.post(url, JSON.stringify(body), options)\n  //         .then(res => parseStatus(res.status, res.data))\n  //         .catch(err => parseStatus(err.response.status, err.response.data))\n  // }\n  // if (method === \"GET\") {\n  //     return axios.get(url, options)\n  //         .then(res => parseStatus(res.status, res.data))\n  //         .catch(err => parseStatus(err.response.status, err.response.data))\n  // }\n};\n\nexport default fetch;\n\nfunction parseStatus(status, res) {\n  return new Promise((resolve, reject) => {\n    if (status >= 200 && status < 300) {\n      resolve(res.data);\n    } else {\n      if (status === 401) {\n        store.dispatch(actions.authLogout());\n      }\n\n      reject({\n        status,\n        res\n      });\n    }\n  });\n}\n\nfunction requestHeaders() {\n  const headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  };\n  const jwt_token = localStorage.getItem('jwt_token');\n\n  if (!!jwt_token) {\n    headers[\"Authorization\"] = `Bearer ${jwt_token}`;\n  }\n\n  return headers;\n}","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/utils/fetch.js"],"names":["axios","store","actions","token","document","head","querySelector","defaults","headers","common","content","fetch","url","method","body","options","requestHeaders","console","log","parseStatus","status","res","Promise","resolve","reject","data","dispatch","authLogout","jwt_token","localStorage","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AAEA,IAAIC,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcC,aAAd,CAA4B,yBAA5B,CAAZ;;AACA,IAAIH,KAAJ,EAAW;AACPH,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,kBAA9B,IAAoD,gBAApD;AACAT,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgDN,KAAK,CAACO,OAAtD;AACH;;AAED,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,KAAuB;AAEjC,QAAMC,OAAO,GAAG;AACZF,IAAAA,MADY;AAEZL,IAAAA,OAAO,EAAEQ,cAAc;AAFX,GAAhB;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ,EAPiC,CAQjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAlBD;;AAoBA,eAAeG,KAAf;;AAEA,SAASQ,WAAT,CAAqBC,MAArB,EAA6BC,GAA7B,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIJ,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA9B,EAAmC;AAC/BG,MAAAA,OAAO,CAACF,GAAG,CAACI,IAAL,CAAP;AACH,KAFD,MAEO;AACH,UAAIL,MAAM,KAAK,GAAf,EAAoB;AAChBnB,QAAAA,KAAK,CAACyB,QAAN,CAAexB,OAAO,CAACyB,UAAR,EAAf;AACH;;AACDH,MAAAA,MAAM,CAAC;AAACJ,QAAAA,MAAD;AAASC,QAAAA;AAAT,OAAD,CAAN;AACH;AACJ,GATM,CAAP;AAUH;;AAED,SAASL,cAAT,GAA0B;AACtB,QAAMR,OAAO,GAAG;AACZ,cAAU,kBADE;AAEZ,oBAAgB;AAFJ,GAAhB;AAKA,QAAMoB,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;;AACA,MAAI,CAAC,CAACF,SAAN,EAAiB;AACbpB,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASoB,SAAU,EAA/C;AACH;;AAED,SAAOpB,OAAP;AACH","sourcesContent":["import axios from 'axios'\r\nimport store from \"../store\";\r\nimport * as actions from \"../ducks/auth/actions\";\r\n\r\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\r\nif (token) {\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n    axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\r\n}\r\n\r\nconst fetch = (url, method, body) => {\r\n\r\n    const options = {\r\n        method,\r\n        headers: requestHeaders(),\r\n    };\r\n\r\n    console.log(headers)\r\n    // if (method === \"POST\") {\r\n    //     return axios.post(url, JSON.stringify(body), options)\r\n    //         .then(res => parseStatus(res.status, res.data))\r\n    //         .catch(err => parseStatus(err.response.status, err.response.data))\r\n    // }\r\n    // if (method === \"GET\") {\r\n    //     return axios.get(url, options)\r\n    //         .then(res => parseStatus(res.status, res.data))\r\n    //         .catch(err => parseStatus(err.response.status, err.response.data))\r\n    // }\r\n};\r\n\r\nexport default fetch\r\n\r\nfunction parseStatus(status, res) {\r\n    return new Promise((resolve, reject) => {\r\n        if (status >= 200 && status < 300) {\r\n            resolve(res.data);\r\n        } else {\r\n            if (status === 401) {\r\n                store.dispatch(actions.authLogout())\r\n            }\r\n            reject({status, res});\r\n        }\r\n    });\r\n}\r\n\r\nfunction requestHeaders() {\r\n    const headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n\r\n    const jwt_token = localStorage.getItem('jwt_token')\r\n    if (!!jwt_token) {\r\n        headers[\"Authorization\"] = `Bearer ${jwt_token}`\r\n    }\r\n\r\n    return headers\r\n}"]},"metadata":{},"sourceType":"module"}