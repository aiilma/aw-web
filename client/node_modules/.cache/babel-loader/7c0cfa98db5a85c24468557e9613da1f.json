{"ast":null,"code":"import axios from 'axios';\nimport store from \"../store\";\nimport * as actions from \"../ducks/auth/actions\";\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\n\nif (token) {\n  axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n}\n\nexport default ((url, method, body) => {\n  const options = {\n    method,\n    headers: requestHeaders()\n  };\n\n  if (method === \"POST\") {\n    return axios.post(url, JSON.stringify(body), options).then(res => parseStatus(res.status, res.data));\n  }\n\n  if (method === \"GET\") {\n    return axios.get(url, options).then(res => parseStatus(res.status, res.data));\n  } // .catch(err => console.log(err))\n  // .then(res => {console.log(res)}, err => {console.log(err)})\n\n});\n\nfunction parseStatus(status, res) {\n  return new Promise((resolve, reject) => {\n    if (status >= 200 && status < 300) {\n      resolve(res.data);\n    } else {\n      if (status === 401) {\n        store.dispatch(actions.authLogout());\n      }\n\n      reject({\n        status,\n        res\n      });\n    }\n  });\n}\n\nfunction requestHeaders() {\n  const headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }; // const jwt_token = localStorage.getItem('jwt_token')\n  // if (jwt_token) headers[\"Authorization\"] = `Bearer ${jwt_token}`\n\n  return headers;\n}","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/utils/fetch.js"],"names":["axios","store","actions","token","document","head","querySelector","defaults","headers","common","content","url","method","body","options","requestHeaders","post","JSON","stringify","then","res","parseStatus","status","data","get","Promise","resolve","reject","dispatch","authLogout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AAEA,IAAIC,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcC,aAAd,CAA4B,yBAA5B,CAAZ;;AACA,IAAIH,KAAJ,EAAW;AACPH,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,kBAA9B,IAAoD,gBAApD;AACAT,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgDN,KAAK,CAACO,OAAtD;AACH;;AAED,gBAAe,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,KAAuB;AAElC,QAAMC,OAAO,GAAG;AACZF,IAAAA,MADY;AAEZJ,IAAAA,OAAO,EAAEO,cAAc;AAFX,GAAhB;;AAKA,MAAIH,MAAM,KAAK,MAAf,EAAuB;AACnB,WAAOZ,KAAK,CAACgB,IAAN,CAAWL,GAAX,EAAgBM,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAhB,EAAsCC,OAAtC,EACFK,IADE,CACGC,GAAG,IAAIC,WAAW,CAACD,GAAG,CAACE,MAAL,EAAaF,GAAG,CAACG,IAAjB,CADrB,CAAP;AAEH;;AACD,MAAIX,MAAM,KAAK,KAAf,EAAsB;AAClB,WAAOZ,KAAK,CAACwB,GAAN,CAAUb,GAAV,EAAeG,OAAf,EACFK,IADE,CACGC,GAAG,IAAIC,WAAW,CAACD,GAAG,CAACE,MAAL,EAAaF,GAAG,CAACG,IAAjB,CADrB,CAAP;AAEH,GAdiC,CAiBlC;AACA;;AACH,CAnBD;;AAqBA,SAASF,WAAT,CAAqBC,MAArB,EAA6BF,GAA7B,EAAkC;AAC9B,SAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIL,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA9B,EAAmC;AAC/BI,MAAAA,OAAO,CAACN,GAAG,CAACG,IAAL,CAAP;AACH,KAFD,MAEO;AACH,UAAID,MAAM,KAAK,GAAf,EAAoB;AAChBrB,QAAAA,KAAK,CAAC2B,QAAN,CAAe1B,OAAO,CAAC2B,UAAR,EAAf;AACH;;AACDF,MAAAA,MAAM,CAAC;AAACL,QAAAA,MAAD;AAASF,QAAAA;AAAT,OAAD,CAAN;AACH;AACJ,GATM,CAAP;AAUH;;AAED,SAASL,cAAT,GAA0B;AACtB,QAAMP,OAAO,GAAG;AACZ,cAAU,kBADE;AAEZ,oBAAgB;AAFJ,GAAhB,CADsB,CAMtB;AACA;;AAEA,SAAOA,OAAP;AACH","sourcesContent":["import axios from 'axios'\r\nimport store from \"../store\";\r\nimport * as actions from \"../ducks/auth/actions\";\r\n\r\nlet token = document.head.querySelector('meta[name=\"csrf-token\"]');\r\nif (token) {\r\n    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n    axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\r\n}\r\n\r\nexport default (url, method, body) => {\r\n\r\n    const options = {\r\n        method,\r\n        headers: requestHeaders(),\r\n    };\r\n\r\n    if (method === \"POST\") {\r\n        return axios.post(url, JSON.stringify(body), options)\r\n            .then(res => parseStatus(res.status, res.data))\r\n    }\r\n    if (method === \"GET\") {\r\n        return axios.get(url, options)\r\n            .then(res => parseStatus(res.status, res.data))\r\n    }\r\n\r\n\r\n    // .catch(err => console.log(err))\r\n    // .then(res => {console.log(res)}, err => {console.log(err)})\r\n};\r\n\r\nfunction parseStatus(status, res) {\r\n    return new Promise((resolve, reject) => {\r\n        if (status >= 200 && status < 300) {\r\n            resolve(res.data);\r\n        } else {\r\n            if (status === 401) {\r\n                store.dispatch(actions.authLogout())\r\n            }\r\n            reject({status, res});\r\n        }\r\n    });\r\n}\r\n\r\nfunction requestHeaders() {\r\n    const headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n\r\n    // const jwt_token = localStorage.getItem('jwt_token')\r\n    // if (jwt_token) headers[\"Authorization\"] = `Bearer ${jwt_token}`\r\n\r\n    return headers\r\n}"]},"metadata":{},"sourceType":"module"}