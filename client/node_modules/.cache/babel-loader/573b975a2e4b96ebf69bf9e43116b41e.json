{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { withFormik } from \"formik\";\nimport SuggestForm from \"./Form\";\nimport { withSnackbar } from \"notistack\";\nimport { withRouter } from \"react-router-dom\";\nimport { checkOnMax, checkOnMin, checkOnRequired } from \"../../../store/utils/form_helpers\";\nconst EnhancedForm = withFormik({\n  mapPropsToValues: props => {\n    return {\n      typeVariant: [],\n      description: ''\n    };\n  },\n  // Custom sync validation\n  validate: (values, _ref) => {\n    let props = _extends({}, _ref);\n\n    const errors = {};\n\n    if (Array.isArray(values.typeVariant) && !values.typeVariant.length) {\n      errors[\"typeVariant\"] = \"Обязательно к заполнению\";\n    }\n\n    let minLimit = 10;\n    let maxLimit = 3072;\n\n    if (!checkOnRequired(values.description)) {\n      errors[\"description\"] = 'Обязательно к заполнению';\n    }\n\n    if (!checkOnMin(values.description, minLimit)) {\n      errors[\"description\"] = `Минимальная длина ${minLimit} символов`;\n    }\n\n    if (!checkOnMax(values.description, maxLimit)) {\n      errors[\"description\"] = `Превышена максимальная длина`;\n    }\n\n    return errors;\n  },\n  handleSubmit: (values, _ref2) => {\n    let setSubmitting = _ref2.setSubmitting,\n        resetForm = _ref2.resetForm,\n        props = _objectWithoutProperties(_ref2, [\"setSubmitting\", \"resetForm\"]);\n\n    const _props$props = props.props,\n          makeRequest = _props$props.makeRequest,\n          enqueueSnackbar = _props$props.enqueueSnackbar,\n          history = _props$props.history;\n\n    const data = _objectSpread({}, values);\n\n    setSubmitting(true); // send...\n\n    makeRequest(data).then(res => {\n      setSubmitting(false);\n      resetForm({\n        typeVariant: [],\n        description: ''\n      }); // history.push('/')\n\n      enqueueSnackbar('OK', {\n        variant: 'success',\n        autoHideDuration: 5000\n      });\n    }).catch(err => {\n      setSubmitting(false);\n      enqueueSnackbar('Упс! Что-то пошло не так...', {\n        variant: 'error',\n        autoHideDuration: 5000\n      });\n    });\n  },\n  enableReinitialize: true,\n  displayName: 'SuggestForm'\n})(SuggestForm);\nexport default withSnackbar(withRouter(EnhancedForm));","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/SuggestForm/EnhancedForm.js"],"names":["React","withFormik","SuggestForm","withSnackbar","withRouter","checkOnMax","checkOnMin","checkOnRequired","EnhancedForm","mapPropsToValues","props","typeVariant","description","validate","values","errors","Array","isArray","length","minLimit","maxLimit","handleSubmit","setSubmitting","resetForm","makeRequest","enqueueSnackbar","history","data","then","res","variant","autoHideDuration","catch","err","enableReinitialize","displayName"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,QAAzB;AACA,OAAOC,WAAP,MAAwB,QAAxB;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,UAAR,EAAoBC,UAApB,EAAgCC,eAAhC,QAAsD,mCAAtD;AAEA,MAAMC,YAAY,GAAGP,UAAU,CAAC;AAC5BQ,EAAAA,gBAAgB,EAAGC,KAAD,IAAW;AACzB,WAAO;AACHC,MAAAA,WAAW,EAAE,EADV;AAEHC,MAAAA,WAAW,EAAE;AAFV,KAAP;AAIH,GAN2B;AAQ5B;AACAC,EAAAA,QAAQ,EAAE,CAACC,MAAD,WAAwB;AAAA,QAAXJ,KAAW;;AAC9B,UAAMK,MAAM,GAAG,EAAf;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACH,WAArB,KAAqC,CAACG,MAAM,CAACH,WAAP,CAAmBO,MAA7D,EAAqE;AACjEH,MAAAA,MAAM,CAAC,aAAD,CAAN,GAAwB,0BAAxB;AACH;;AAED,QAAII,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAI,CAACb,eAAe,CAACO,MAAM,CAACF,WAAR,CAApB,EAA0C;AACtCG,MAAAA,MAAM,CAAC,aAAD,CAAN,GAAwB,0BAAxB;AACH;;AACD,QAAI,CAACT,UAAU,CAACQ,MAAM,CAACF,WAAR,EAAqBO,QAArB,CAAf,EAA+C;AAC3CJ,MAAAA,MAAM,CAAC,aAAD,CAAN,GAAyB,qBAAoBI,QAAS,WAAtD;AACH;;AACD,QAAI,CAACd,UAAU,CAACS,MAAM,CAACF,WAAR,EAAqBQ,QAArB,CAAf,EAA+C;AAC3CL,MAAAA,MAAM,CAAC,aAAD,CAAN,GAAyB,8BAAzB;AACH;;AAED,WAAOA,MAAP;AACH,GA7B2B;AA+B5BM,EAAAA,YAAY,EAAE,CAACP,MAAD,YAAkD;AAAA,QAAxCQ,aAAwC,SAAxCA,aAAwC;AAAA,QAAzBC,SAAyB,SAAzBA,SAAyB;AAAA,QAAXb,KAAW;;AAAA,yBACZA,KAAK,CAACA,KADM;AAAA,UACrDc,WADqD,gBACrDA,WADqD;AAAA,UACxCC,eADwC,gBACxCA,eADwC;AAAA,UACvBC,OADuB,gBACvBA,OADuB;;AAG5D,UAAMC,IAAI,qBACHb,MADG,CAAV;;AAIAQ,IAAAA,aAAa,CAAC,IAAD,CAAb,CAP4D,CAQ5D;;AACAE,IAAAA,WAAW,CAACG,IAAD,CAAX,CAAkBC,IAAlB,CAAwBC,GAAD,IAAS;AAC5BP,MAAAA,aAAa,CAAC,KAAD,CAAb;AAEAC,MAAAA,SAAS,CAAC;AACNZ,QAAAA,WAAW,EAAE,EADP;AAENC,QAAAA,WAAW,EAAE;AAFP,OAAD,CAAT,CAH4B,CAO5B;;AAEAa,MAAAA,eAAe,CAAC,IAAD,EAAO;AAClBK,QAAAA,OAAO,EAAE,SADS;AAElBC,QAAAA,gBAAgB,EAAE;AAFA,OAAP,CAAf;AAIH,KAbD,EAaGC,KAbH,CAaSC,GAAG,IAAI;AACZX,MAAAA,aAAa,CAAC,KAAD,CAAb;AAEAG,MAAAA,eAAe,CAAC,6BAAD,EAAgC;AAC3CK,QAAAA,OAAO,EAAE,OADkC;AAE3CC,QAAAA,gBAAgB,EAAE;AAFyB,OAAhC,CAAf;AAIH,KApBD;AAsBH,GA9D2B;AAgE5BG,EAAAA,kBAAkB,EAAE,IAhEQ;AAkE5BC,EAAAA,WAAW,EAAE;AAlEe,CAAD,CAAV,CAmElBjC,WAnEkB,CAArB;AAqEA,eAAeC,YAAY,CAACC,UAAU,CAACI,YAAD,CAAX,CAA3B","sourcesContent":["import React from 'react'\r\nimport {withFormik} from \"formik\";\r\nimport SuggestForm from \"./Form\";\r\nimport {withSnackbar} from \"notistack\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {checkOnMax, checkOnMin, checkOnRequired} from \"../../../store/utils/form_helpers\";\r\n\r\nconst EnhancedForm = withFormik({\r\n    mapPropsToValues: (props) => {\r\n        return {\r\n            typeVariant: [],\r\n            description: ''\r\n        }\r\n    },\r\n\r\n    // Custom sync validation\r\n    validate: (values, {...props}) => {\r\n        const errors = {};\r\n\r\n        if (Array.isArray(values.typeVariant) && !values.typeVariant.length) {\r\n            errors[\"typeVariant\"] = \"Обязательно к заполнению\"\r\n        }\r\n\r\n        let minLimit = 10\r\n        let maxLimit = 3072\r\n        if (!checkOnRequired(values.description)) {\r\n            errors[\"description\"] = 'Обязательно к заполнению'\r\n        }\r\n        if (!checkOnMin(values.description, minLimit)) {\r\n            errors[\"description\"] = `Минимальная длина ${minLimit} символов`\r\n        }\r\n        if (!checkOnMax(values.description, maxLimit)) {\r\n            errors[\"description\"] = `Превышена максимальная длина`\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, {setSubmitting, resetForm, ...props}) => {\r\n        const {makeRequest, enqueueSnackbar, history} = props.props\r\n\r\n        const data = {\r\n            ...values\r\n        }\r\n\r\n        setSubmitting(true);\r\n        // send...\r\n        makeRequest(data).then((res) => {\r\n            setSubmitting(false)\r\n\r\n            resetForm({\r\n                typeVariant: [],\r\n                description: ''\r\n            })\r\n            // history.push('/')\r\n\r\n            enqueueSnackbar('OK', {\r\n                variant: 'success',\r\n                autoHideDuration: 5000,\r\n            });\r\n        }).catch(err => {\r\n            setSubmitting(false)\r\n\r\n            enqueueSnackbar('Упс! Что-то пошло не так...', {\r\n                variant: 'error',\r\n                autoHideDuration: 5000,\r\n            });\r\n        })\r\n\r\n    },\r\n\r\n    enableReinitialize: true,\r\n\r\n    displayName: 'SuggestForm',\r\n})(SuggestForm)\r\n\r\nexport default withSnackbar(withRouter(EnhancedForm))"]},"metadata":{},"sourceType":"module"}