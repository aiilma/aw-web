{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\src\\\\views\\\\pages\\\\Compositions\\\\CompositionsContainer.js\";\nimport React, { Component } from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport { withRouter } from \"react-router-dom\";\nimport CompositionList from \"./CompositionList\";\nimport { connect } from \"react-redux\";\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\nimport Container from \"@material-ui/core/Container\";\nimport styled from \"styled-components\";\nimport { fetchList, clearList } from \"../../../store/ducks/compositions/operations\";\nimport Preloader from \"../../common/Preloader\";\nimport ReactPaginate from 'react-paginate';\nconst CompListWrapper = styled(Container)`\n        padding-top: ${({\n  theme\n}) => theme.spacing(2)}px;\n        padding-bottom: ${({\n  theme\n}) => theme.spacing(2)}px;\n        background-color: rgba(33,33,33,.95);\n        border-radius: 20px;\n`;\nconst PageCaptionSpacer = styled.div`\n    padding: ${({\n  theme\n}) => theme.spacing(4, 0)};\n`;\n\nclass CompositionsContainer extends Component {\n  componentDidMount() {\n    if (this.props.compositions.length === 0) {\n      const q = this.props.location.search;\n      this.props.fetchList(q);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.compositions.length > 0) {\n      this.props.clearList();\n    }\n  }\n\n  handlePageClick(data) {\n    let selected = data.selected;\n    let offset = Math.ceil(selected * this.props.perPage);\n    this.setState({\n      offset: offset\n    }, () => {\n      this.loadCommentsFromServer();\n    });\n  }\n\n  render() {\n    return React.createElement(SecondaryLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(PageCaptionSpacer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Container, {\n      maxWidth: \"xl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      align: \"left\",\n      color: \"textPrimary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"\\u041B\\u0438\\u0441\\u0442\\u0438\\u043D\\u0433 \\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u0439\"))), React.createElement(CompListWrapper, {\n      maxWidth: \"xl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.props.isFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }) : React.createElement(CompositionList, {\n      compositions: this.props.compositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(ReactPaginate, {\n      previousLabel: 'previous',\n      nextLabel: 'next',\n      breakLabel: '...',\n      breakClassName: 'break-me',\n      pageCount: 6,\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: this.handlePageClick.bind(this),\n      containerClassName: 'pagination',\n      subContainerClassName: 'pages pagination',\n      activeClassName: 'active',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  compositions: store.compositions.compositions,\n  isFetching: store.compositions.isFetching\n});\n\nexport default connect(mapStateToProps, {\n  fetchList,\n  clearList\n})(withRouter(CompositionsContainer));","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/Compositions/CompositionsContainer.js"],"names":["React","Component","Typography","withRouter","CompositionList","connect","SecondaryLayout","Container","styled","fetchList","clearList","Preloader","ReactPaginate","CompListWrapper","theme","spacing","PageCaptionSpacer","div","CompositionsContainer","componentDidMount","props","compositions","length","q","location","search","componentWillUnmount","handlePageClick","data","selected","offset","Math","ceil","perPage","setState","loadCommentsFromServer","render","isFetching","bind","mapStateToProps","store"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CompositionList from \"./CompositionList\";\r\nimport {connect} from \"react-redux\";\r\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport styled from \"styled-components\";\r\nimport {fetchList, clearList} from \"../../../store/ducks/compositions/operations\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nconst CompListWrapper = styled(Container)`\r\n        padding-top: ${({theme}) => theme.spacing(2)}px;\r\n        padding-bottom: ${({theme}) => theme.spacing(2)}px;\r\n        background-color: rgba(33,33,33,.95);\r\n        border-radius: 20px;\r\n`\r\n\r\nconst PageCaptionSpacer = styled.div`\r\n    padding: ${({theme}) => theme.spacing(4, 0)};\r\n`\r\n\r\nclass CompositionsContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.compositions.length === 0) {\r\n            const q = this.props.location.search\r\n            this.props.fetchList(q)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.compositions.length > 0) {\r\n            this.props.clearList()\r\n        }\r\n    }\r\n\r\n    handlePageClick(data) {\r\n        let selected = data.selected;\r\n        let offset = Math.ceil(selected * this.props.perPage);\r\n\r\n        this.setState({offset: offset}, () => {\r\n            this.loadCommentsFromServer();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <SecondaryLayout>\r\n                <PageCaptionSpacer>\r\n                    <Container maxWidth=\"xl\">\r\n                        <Typography component=\"h1\" variant=\"h5\" align=\"left\" color=\"textPrimary\">\r\n                            Листинг композиций\r\n                        </Typography>\r\n                    </Container>\r\n                </PageCaptionSpacer>\r\n\r\n                <CompListWrapper maxWidth=\"xl\">\r\n                    {\r\n                        this.props.isFetching ?\r\n                            <Preloader/> :\r\n                            <CompositionList compositions={this.props.compositions}/>\r\n                    }\r\n                    <ReactPaginate\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={6}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={5}\r\n                        onPageChange={this.handlePageClick.bind(this)}\r\n                        containerClassName={'pagination'}\r\n                        subContainerClassName={'pages pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </CompListWrapper>\r\n\r\n            </SecondaryLayout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    compositions: store.compositions.compositions,\r\n    isFetching: store.compositions.isFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchList, clearList})(withRouter(CompositionsContainer))"]},"metadata":{},"sourceType":"module"}