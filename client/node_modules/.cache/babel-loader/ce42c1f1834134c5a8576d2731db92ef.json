{"ast":null,"code":"import * as types from \"./types\";\nexport const login = data => {\n  if (data.success) {\n    let userData = {\n      user_id: data.user.user_id,\n      steamid: data.user.steamid,\n      nickname: data.user.nickname,\n      avatar: data.user.avatar,\n      balance: data.user.balance,\n      group: data.user.group,\n      token: data.token,\n      timestamp: new Date().toString()\n    }; // save app state with user date in local storage\n    // localStorage[\"user\"] = JSON.stringify(authState);\n\n    return authLogin({\n      user: userData\n    });\n  } else alert(\"failed\");\n};\nexport const logout = () => {\n  alert('logout'); // localStorage.removeItem(\"access_token\");\n  // localStorage.removeItem(\"expire_at\");\n  // let appState = {\n  //     isLoggedIn: false,\n  //     user: {}\n  // };\n  // // save app state with user date in local storage\n  // localStorage[\"appState\"] = JSON.stringify(appState);\n  // this.setState(appState);\n};\n\nfunction authLogin(payload) {\n  return {\n    type: types.AUTH_LOGIN,\n    payload\n  };\n}\n\nfunction authLogout() {\n  return {\n    type: types.AUTH_LOGOUT\n  };\n}","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/ducks/auth/actions.js"],"names":["types","login","data","success","userData","user_id","user","steamid","nickname","avatar","balance","group","token","timestamp","Date","toString","authLogin","alert","logout","payload","type","AUTH_LOGIN","authLogout","AUTH_LOGOUT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC3B,MAAIA,IAAI,CAACC,OAAT,EAAkB;AACd,QAAIC,QAAQ,GAAG;AACXC,MAAAA,OAAO,EAAEH,IAAI,CAACI,IAAL,CAAUD,OADR;AAEXE,MAAAA,OAAO,EAAEL,IAAI,CAACI,IAAL,CAAUC,OAFR;AAGXC,MAAAA,QAAQ,EAAEN,IAAI,CAACI,IAAL,CAAUE,QAHT;AAIXC,MAAAA,MAAM,EAAEP,IAAI,CAACI,IAAL,CAAUG,MAJP;AAKXC,MAAAA,OAAO,EAAER,IAAI,CAACI,IAAL,CAAUI,OALR;AAMXC,MAAAA,KAAK,EAAET,IAAI,CAACI,IAAL,CAAUK,KANN;AAOXC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KAPD;AAQXC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,QAAX;AARA,KAAf,CADc,CAYd;AACA;;AAEA,WAAOC,SAAS,CAAC;AACbV,MAAAA,IAAI,EAAEF;AADO,KAAD,CAAhB;AAGH,GAlBD,MAkBOa,KAAK,CAAC,QAAD,CAAL;AACV,CApBM;AAsBP,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxBD,EAAAA,KAAK,CAAC,QAAD,CAAL,CADwB,CAExB;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAbM;;AAeP,SAASD,SAAT,CAAmBG,OAAnB,EAA4B;AACxB,SAAO;AACHC,IAAAA,IAAI,EAAEpB,KAAK,CAACqB,UADT;AAEHF,IAAAA;AAFG,GAAP;AAIH;;AAED,SAASG,UAAT,GAAsB;AAClB,SAAO;AACHF,IAAAA,IAAI,EAAEpB,KAAK,CAACuB;AADT,GAAP;AAGH","sourcesContent":["import * as types from \"./types\";\r\n\r\nexport const login = (data) => {\r\n    if (data.success) {\r\n        let userData = {\r\n            user_id: data.user.user_id,\r\n            steamid: data.user.steamid,\r\n            nickname: data.user.nickname,\r\n            avatar: data.user.avatar,\r\n            balance: data.user.balance,\r\n            group: data.user.group,\r\n            token: data.token,\r\n            timestamp: new Date().toString()\r\n        };\r\n\r\n        // save app state with user date in local storage\r\n        // localStorage[\"user\"] = JSON.stringify(authState);\r\n\r\n        return authLogin({\r\n            user: userData\r\n        })\r\n    } else alert(\"failed\");\r\n}\r\n\r\nexport const logout = () => {\r\n    alert('logout');\r\n    // localStorage.removeItem(\"access_token\");\r\n    // localStorage.removeItem(\"expire_at\");\r\n\r\n\r\n    // let appState = {\r\n    //     isLoggedIn: false,\r\n    //     user: {}\r\n    // };\r\n    // // save app state with user date in local storage\r\n    // localStorage[\"appState\"] = JSON.stringify(appState);\r\n    // this.setState(appState);\r\n}\r\n\r\nfunction authLogin(payload) {\r\n    return {\r\n        type: types.AUTH_LOGIN,\r\n        payload\r\n    }\r\n}\r\n\r\nfunction authLogout() {\r\n    return {\r\n        type: types.AUTH_LOGOUT\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}