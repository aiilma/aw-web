{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\src\\\\views\\\\pages\\\\CompOrderForm\\\\Container.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\nimport { FormWrapper, InnerFormSpacer, Title } from \"../../common/form_components\";\nimport OrderFormInputs from \"./Inputs/Inputs\";\nimport OrderFormSummarize from \"./Summarize/Summarize\";\nimport OrderFormControls from \"./Controls/Controls\";\nimport { Spacer } from \"../../common/layout\";\nimport { withFormik } from 'formik';\n\nconst OrderFormContainer = props => {\n  const values = props.values,\n        touched = props.touched,\n        errors = props.errors,\n        handleChange = props.handleChange,\n        handleBlur = props.handleBlur,\n        handleSubmit = props.handleSubmit;\n\n  const handleTypeVariant = name => event => {// this.setState({\n    //     ...this.state,\n    //     typeVariant: {\n    //         ...this.state.typeVariant,\n    //         [name]: {\n    //             ...this.state.typeVariant[name],\n    //             value: event.target.checked,\n    //         }\n    //     }\n    // });\n  };\n\n  const handleInputs = event => {// const inpName = event.target.id\n    // const inpValue = event.target.value\n    //\n    // this.setState({\n    //     ...this.state,\n    //     inputs: {\n    //         ...this.state.inputs,\n    //         [inpName]: {\n    //             ...this.state.inputs[inpName],\n    //             value: inpValue\n    //         }\n    //     }\n    // })\n  };\n\n  const onClear = () => {// setState(getDefaultState(props.compData))\n    // clear session / localStorage (action)\n  };\n\n  const onBack = () => {\n    props.history.goBack();\n  };\n\n  console.log(values);\n  return React.createElement(SecondaryLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Spacer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(FormWrapper, {\n    maxWidth: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(InnerFormSpacer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Title, {\n    text: \"\\u0424\\u043E\\u0440\\u043C\\u0430 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.name,\n    name: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), errors.name && touched.name && React.createElement(\"div\", {\n    id: \"feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, errors.name)))));\n};\n\nconst getDefaultValues = composition => {\n  let typeVariant = {\n    long: {\n      value: composition.typeVariant === 1,\n      disabled: composition.typeVariant === 2\n    },\n    short: {\n      value: composition.typeVariant === 2,\n      disabled: composition.typeVariant === 1\n    }\n  };\n  let inputs = {};\n\n  if (Object.entries(composition.inputs).length > 0) {\n    inputs = _objectSpread({}, composition.inputs);\n    Object.keys(inputs).forEach(propName => {\n      inputs[propName] = _objectSpread({}, composition.inputs[propName], {\n        value: ''\n      });\n    });\n  }\n\n  return {\n    typeVariant,\n    inputs\n  };\n};\n\nconst OrderFormWithLocalState = withFormik({\n  mapPropsToValues: props => getDefaultValues(props.compData),\n  // Custom sync validation\n  validate: values => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = 'Required';\n    }\n\n    return errors;\n  },\n  handleSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false); // валидация данных в стейте, затем отправка на сервер\n      // props.history.push(`${props.location.pathname}/success`)\n    }, 1000);\n  },\n  displayName: 'BasicForm'\n})(OrderFormContainer);\n\nconst mapStateToProps = state => ({\n  user: state.auth,\n  compData: state.compOrderForm\n});\n\nexport default connect(mapStateToProps, {})(OrderFormWithLocalState); // export default connect(mapStateToProps, {})(OrderFormContainer)\n// <OrderFormInputs inputs={this.state} handlers={{\n//     handleTypeVariant: this.props.compData.typeVariant === 0 ? this.handleTypeVariant : () => {\n//     },\n//         handleInputs: this.handleInputs\n// }}/>\n// <OrderFormSummarize price={this.props.compData.price} title={this.props.compData.title}/>\n// <OrderFormControls onClear={onClear} onBack={onBack}/>","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/CompOrderForm/Container.js"],"names":["React","Component","connect","SecondaryLayout","FormWrapper","InnerFormSpacer","Title","OrderFormInputs","OrderFormSummarize","OrderFormControls","Spacer","withFormik","OrderFormContainer","props","values","touched","errors","handleChange","handleBlur","handleSubmit","handleTypeVariant","name","event","handleInputs","onClear","onBack","history","goBack","console","log","getDefaultValues","composition","typeVariant","long","value","disabled","short","inputs","Object","entries","length","keys","forEach","propName","OrderFormWithLocalState","mapPropsToValues","compData","validate","setSubmitting","setTimeout","alert","JSON","stringify","displayName","mapStateToProps","state","user","auth","compOrderForm"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\r\nimport {FormWrapper, InnerFormSpacer, Title} from \"../../common/form_components\";\r\nimport OrderFormInputs from \"./Inputs/Inputs\";\r\nimport OrderFormSummarize from \"./Summarize/Summarize\";\r\nimport OrderFormControls from \"./Controls/Controls\";\r\nimport {Spacer} from \"../../common/layout\";\r\nimport {withFormik} from 'formik';\r\n\r\nconst OrderFormContainer = (props) => {\r\n    const {\r\n        values, touched, errors,\r\n        handleChange, handleBlur, handleSubmit,\r\n    } = props;\r\n\r\n    const handleTypeVariant = name => event => {\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     typeVariant: {\r\n        //         ...this.state.typeVariant,\r\n        //         [name]: {\r\n        //             ...this.state.typeVariant[name],\r\n        //             value: event.target.checked,\r\n        //         }\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    const handleInputs = event => {\r\n        // const inpName = event.target.id\r\n        // const inpValue = event.target.value\r\n        //\r\n        // this.setState({\r\n        //     ...this.state,\r\n        //     inputs: {\r\n        //         ...this.state.inputs,\r\n        //         [inpName]: {\r\n        //             ...this.state.inputs[inpName],\r\n        //             value: inpValue\r\n        //         }\r\n        //     }\r\n        // })\r\n\r\n    }\r\n\r\n    const onClear = () => {\r\n        // setState(getDefaultState(props.compData))\r\n        // clear session / localStorage (action)\r\n    }\r\n    const onBack = () => {\r\n        props.history.goBack()\r\n    }\r\n    console.log(values)\r\n    return (\r\n        <SecondaryLayout>\r\n            <Spacer/>\r\n\r\n            <FormWrapper maxWidth=\"xl\">\r\n                <InnerFormSpacer>\r\n                    <Title text=\"Форма заказа\"/>\r\n\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.name}\r\n                            name=\"name\"\r\n                        />\r\n                        {errors.name && touched.name && <div id=\"feedback\">{errors.name}</div>}\r\n                    </form>\r\n\r\n                </InnerFormSpacer>\r\n            </FormWrapper>\r\n\r\n        </SecondaryLayout>\r\n    );\r\n};\r\n\r\nconst getDefaultValues = (composition) => {\r\n    let typeVariant = {\r\n        long: {\r\n            value: composition.typeVariant === 1,\r\n            disabled: composition.typeVariant === 2,\r\n        },\r\n        short: {\r\n            value: composition.typeVariant === 2,\r\n            disabled: composition.typeVariant === 1,\r\n        },\r\n    }\r\n    let inputs = {}\r\n\r\n    if (Object.entries(composition.inputs).length > 0) {\r\n        inputs = {\r\n            ...composition.inputs\r\n        }\r\n\r\n        Object.keys(inputs).forEach((propName) => {\r\n            inputs[propName] = {\r\n                ...composition.inputs[propName],\r\n                value: '',\r\n            }\r\n        })\r\n    }\r\n\r\n    return ({\r\n        typeVariant,\r\n        inputs,\r\n    })\r\n}\r\n\r\nconst OrderFormWithLocalState = withFormik({\r\n    mapPropsToValues: (props) => getDefaultValues(props.compData),\r\n\r\n    // Custom sync validation\r\n    validate: values => {\r\n        const errors = {};\r\n\r\n        if (!values.name) {\r\n            errors.name = 'Required';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, {setSubmitting}) => {\r\n        setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n            // валидация данных в стейте, затем отправка на сервер\r\n            // props.history.push(`${props.location.pathname}/success`)\r\n        }, 1000);\r\n    },\r\n\r\n    displayName: 'BasicForm',\r\n})(OrderFormContainer);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.auth,\r\n    compData: state.compOrderForm\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(OrderFormWithLocalState)\r\n// export default connect(mapStateToProps, {})(OrderFormContainer)\r\n\r\n\r\n\r\n\r\n// <OrderFormInputs inputs={this.state} handlers={{\r\n//     handleTypeVariant: this.props.compData.typeVariant === 0 ? this.handleTypeVariant : () => {\r\n//     },\r\n//         handleInputs: this.handleInputs\r\n// }}/>\r\n// <OrderFormSummarize price={this.props.compData.price} title={this.props.compData.title}/>\r\n// <OrderFormControls onClear={onClear} onBack={onBack}/>"]},"metadata":{},"sourceType":"module"}