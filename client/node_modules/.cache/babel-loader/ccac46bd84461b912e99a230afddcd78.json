{"ast":null,"code":"import { authCheck, authLogout, authLogin } from \"./actions\";\nimport Http from '../../utils/Http'; // const login = (creds) => {\n//     // if (data.success) {\n//     const {user} = creds\n//     let userData = {\n//         user_id: user.user_id,\n//         steamid: user.steamid,\n//         nickname: user.nickname,\n//         avatar: user.avatar,\n//         balance: user.balance,\n//         group: user.group,\n//         timestamp: new Date().toString()\n//     };\n//     let authData = {\n//         isAuthenticated: true,\n//         token: creds.token,\n//         user: userData\n//     }\n//\n//     // save app state with user date in local storage\n//     localStorage[\"user\"] = JSON.stringify(authData);\n//     return loginAC(authData)\n//     // } else alert(\"failed\");\n// }\n// const logout = () => {\n//     // save app state with user date in local storage\n//     let authData = {\n//         isAuthenticated: false,\n//         token: null,\n//         user: {}\n//     }\n//\n//     localStorage[\"user\"] = JSON.stringify(authData);\n//     return logoutAC(authData)\n// }\n\nconst login = credentials => {\n  return dispatch => new Promise((resolve, reject) => {\n    Http.post('api/auth/login', credentials).then(res => {\n      dispatch(authLogin(res.data));\n      return resolve();\n    }).catch(err => {\n      const statusCode = err.response.status;\n      const data = {\n        error: null,\n        statusCode\n      };\n\n      if (statusCode === 401 || statusCode === 422) {\n        // status 401 means unauthorized\n        // status 422 means unprocessable entity\n        data.error = err.response.data.message;\n      }\n\n      return reject(data);\n    });\n  });\n};\n\nexport { login };","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/ducks/auth/operations.js"],"names":["authCheck","authLogout","authLogin","Http","login","credentials","dispatch","Promise","resolve","reject","post","then","res","data","catch","err","statusCode","response","status","error","message"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,UAAlB,EAA6BC,SAA7B,QAA6C,WAA7C;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAIC,WAAD,IAAiB;AAC3B,SAAOC,QAAQ,IACX,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BN,IAAAA,IAAI,CAACO,IAAL,CAAU,gBAAV,EAA4BL,WAA5B,EACKM,IADL,CACUC,GAAG,IAAI;AACTN,MAAAA,QAAQ,CAACJ,SAAS,CAACU,GAAG,CAACC,IAAL,CAAV,CAAR;AACA,aAAOL,OAAO,EAAd;AACH,KAJL,EAKKM,KALL,CAKWC,GAAG,IAAI;AACV,YAAMC,UAAU,GAAGD,GAAG,CAACE,QAAJ,CAAaC,MAAhC;AACA,YAAML,IAAI,GAAG;AACTM,QAAAA,KAAK,EAAE,IADE;AAETH,QAAAA;AAFS,OAAb;;AAIA,UAAIA,UAAU,KAAK,GAAf,IAAsBA,UAAU,KAAK,GAAzC,EAA8C;AAC1C;AACA;AACAH,QAAAA,IAAI,CAACM,KAAL,GAAaJ,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBO,OAA/B;AACH;;AACD,aAAOX,MAAM,CAACI,IAAD,CAAb;AACH,KAjBL;AAkBH,GAnBD,CADJ;AAsBH,CAvBD;;AA0BA,SACIT,KADJ","sourcesContent":["import {authCheck,authLogout,authLogin} from \"./actions\";\r\nimport Http from '../../utils/Http'\r\n\r\n// const login = (creds) => {\r\n//     // if (data.success) {\r\n//     const {user} = creds\r\n//     let userData = {\r\n//         user_id: user.user_id,\r\n//         steamid: user.steamid,\r\n//         nickname: user.nickname,\r\n//         avatar: user.avatar,\r\n//         balance: user.balance,\r\n//         group: user.group,\r\n//         timestamp: new Date().toString()\r\n//     };\r\n//     let authData = {\r\n//         isAuthenticated: true,\r\n//         token: creds.token,\r\n//         user: userData\r\n//     }\r\n//\r\n//     // save app state with user date in local storage\r\n//     localStorage[\"user\"] = JSON.stringify(authData);\r\n//     return loginAC(authData)\r\n//     // } else alert(\"failed\");\r\n// }\r\n\r\n// const logout = () => {\r\n//     // save app state with user date in local storage\r\n//     let authData = {\r\n//         isAuthenticated: false,\r\n//         token: null,\r\n//         user: {}\r\n//     }\r\n//\r\n//     localStorage[\"user\"] = JSON.stringify(authData);\r\n//     return logoutAC(authData)\r\n// }\r\n\r\nconst login = (credentials) => {\r\n    return dispatch => (\r\n        new Promise((resolve, reject) => {\r\n            Http.post('api/auth/login', credentials)\r\n                .then(res => {\r\n                    dispatch(authLogin(res.data));\r\n                    return resolve();\r\n                })\r\n                .catch(err => {\r\n                    const statusCode = err.response.status;\r\n                    const data = {\r\n                        error: null,\r\n                        statusCode,\r\n                    };\r\n                    if (statusCode === 401 || statusCode === 422) {\r\n                        // status 401 means unauthorized\r\n                        // status 422 means unprocessable entity\r\n                        data.error = err.response.data.message;\r\n                    }\r\n                    return reject(data);\r\n                })\r\n        })\r\n    )\r\n}\r\n\r\n\r\nexport {\r\n    login\r\n}"]},"metadata":{},"sourceType":"module"}