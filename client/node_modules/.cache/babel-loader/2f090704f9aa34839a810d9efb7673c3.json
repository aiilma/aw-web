{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\src\\\\views\\\\pages\\\\CompList\\\\Container.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport CompList from \"./CompList\";\nimport { connect } from \"react-redux\";\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\nimport { fetchList, clearList } from \"../../../store/ducks/comp-list/operations\";\nimport Preloader from \"../../common/Preloader\";\nimport queryString from 'query-string';\nimport { ContentWrapper, PageCaption, Pagination } from \"../../common/layout\";\n\nclass CompositionsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: null,\n      total: null,\n      perPage: null,\n      countPages: null\n    };\n    this.loadCompositions = this.loadCompositions.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          compositions = _this$props.compositions,\n          location = _this$props.location;\n\n    if (compositions.length === 0) {\n      const search = queryString.parse(location.search);\n      if (!(+search.page > 0)) search.page = 1;\n      this.loadCompositions(null, search.page); //\n      // const uri = queryString.stringifyUrl({url: location.pathname, query: search});\n      //\n      // fetchList(uri).then((res) => {\n      //     const countPages = Math.ceil(res.total / res.per_page)\n      //\n      //     this.setState({\n      //         ...this.state,\n      //         currentPage: +search.page < countPages ? +search.page : 1,\n      //         total: res.total,\n      //         per_page: res.per_page,\n      //         countPages: countPages,\n      //     })\n      // })\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.compositions.length > 0) {\n      this.props.clearList();\n    }\n  }\n\n  loadCompositions(e, to) {\n    const _this$props2 = this.props,\n          location = _this$props2.location,\n          fetchList = _this$props2.fetchList;\n    const uri = queryString.stringifyUrl({\n      url: location.pathname,\n      query: {\n        page: to\n      }\n    });\n    return fetchList(uri).then(res => {\n      const current_page = res.current_page,\n            per_page = res.per_page,\n            total = res.total;\n      this.setState(_objectSpread({}, this.state, {\n        currentPage: current_page,\n        perPage: per_page,\n        total: total,\n        countPages: Math.ceil(total / per_page)\n      }));\n    });\n  }\n\n  render() {\n    // console.log(this.state)\n    const pagerNode = React.createElement(Pagination, {\n      count: this.state.countPages,\n      onChange: this.loadCompositions,\n      page: this.state.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n    return React.createElement(SecondaryLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(PageCaption, {\n      title: \"\\u041B\\u0438\\u0441\\u0442\\u0438\\u043D\\u0433 \\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u0439\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(ContentWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, pagerNode, this.props.isFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : React.createElement(CompList, {\n      compositions: this.props.compositions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), pagerNode));\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  compositions: store.compList.compositions,\n  isFetching: store.compList.isFetching\n});\n\nexport default connect(mapStateToProps, {\n  fetchList,\n  clearList\n})(withRouter(CompositionsContainer));","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/CompList/Container.js"],"names":["React","Component","withRouter","CompList","connect","SecondaryLayout","fetchList","clearList","Preloader","queryString","ContentWrapper","PageCaption","Pagination","CompositionsContainer","constructor","props","state","currentPage","total","perPage","countPages","loadCompositions","bind","componentDidMount","compositions","location","length","search","parse","page","componentWillUnmount","e","to","uri","stringifyUrl","url","pathname","query","then","res","current_page","per_page","setState","Math","ceil","render","pagerNode","isFetching","mapStateToProps","store","compList"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {withRouter} from \"react-router-dom\";\r\nimport CompList from \"./CompList\";\r\nimport {connect} from \"react-redux\";\r\nimport SecondaryLayout from \"../../layout/SecondaryLayout\";\r\nimport {fetchList, clearList} from \"../../../store/ducks/comp-list/operations\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport queryString from 'query-string'\r\nimport {ContentWrapper, PageCaption, Pagination} from \"../../common/layout\";\r\n\r\n\r\n\r\n\r\nclass CompositionsContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentPage: null,\r\n            total: null,\r\n            perPage: null,\r\n            countPages: null,\r\n        }\r\n        this.loadCompositions = this.loadCompositions.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {compositions, location} = this.props\r\n\r\n        if (compositions.length === 0) {\r\n            const search = queryString.parse(location.search)\r\n            if (!(+search.page > 0)) search.page = 1\r\n            this.loadCompositions(null, search.page)\r\n\r\n            //\r\n            // const uri = queryString.stringifyUrl({url: location.pathname, query: search});\r\n            //\r\n            // fetchList(uri).then((res) => {\r\n            //     const countPages = Math.ceil(res.total / res.per_page)\r\n            //\r\n            //     this.setState({\r\n            //         ...this.state,\r\n            //         currentPage: +search.page < countPages ? +search.page : 1,\r\n            //         total: res.total,\r\n            //         per_page: res.per_page,\r\n            //         countPages: countPages,\r\n            //     })\r\n            // })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.compositions.length > 0) {\r\n            this.props.clearList()\r\n        }\r\n    }\r\n\r\n    loadCompositions(e, to) {\r\n        const {location, fetchList} = this.props\r\n\r\n        const uri = queryString.stringifyUrl({\r\n            url: location.pathname, query: {\r\n                page: to,\r\n            }\r\n        });\r\n\r\n        return fetchList(uri).then(res => {\r\n            const {current_page, per_page, total} = res;\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                currentPage: current_page,\r\n                perPage: per_page,\r\n                total: total,\r\n                countPages: Math.ceil(total / per_page)\r\n            })\r\n        })\r\n    };\r\n\r\n    render() {\r\n        // console.log(this.state)\r\n        const pagerNode = (<Pagination\r\n            count={this.state.countPages}\r\n            onChange={this.loadCompositions}\r\n            page={this.state.currentPage}/>)\r\n\r\n        return (\r\n            <SecondaryLayout>\r\n                <PageCaption title=\"Листинг композиций\"/>\r\n\r\n                <ContentWrapper>\r\n                    {pagerNode}\r\n                    {\r\n                        this.props.isFetching ?\r\n                            <Preloader/> :\r\n                            <CompList compositions={this.props.compositions}/>\r\n                    }\r\n                    {pagerNode}\r\n                </ContentWrapper>\r\n\r\n            </SecondaryLayout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    compositions: store.compList.compositions,\r\n    isFetching: store.compList.isFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchList, clearList})(withRouter(CompositionsContainer))"]},"metadata":{},"sourceType":"module"}