{"ast":null,"code":"import { authLogin, authLogout, authMe } from \"./actions\";\nimport { fetch } from \"../../utils\";\n\nconst login = response => dispatch => {\n  return new Promise((resolve, reject) => {\n    if (response.success) {\n      const creds = response.data;\n      dispatch(authLogin(creds));\n      return resolve();\n    } else {\n      return reject();\n    }\n  });\n};\n\nconst logout = () => dispatch => {\n  return fetch('/api/auth/logout', \"POST\").then(() => {\n    dispatch(authLogout());\n  });\n};\n\nconst me = () => dispatch => {\n  console.log('h');\n  return fetch('/api/auth/me', \"POST\").then(user => {\n    dispatch(authMe(user));\n  }).catch(err => {\n    console.error(err);\n  });\n};\n\nconst refresh = token => (dispatch, getState) => {\n  if (!!token && !getState().auth.isAuthenticated) {\n    // если данные о пользователе в стейте, тогда запрос за новым токеном (в теле - старый),\n    return fetch('/api/auth/refresh', \"POST\").then(data => {\n      return me();\n    });\n  } else {\n    return logout();\n  }\n};\n\nexport { login, logout, me, refresh };","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/ducks/auth/operations.js"],"names":["authLogin","authLogout","authMe","fetch","login","response","dispatch","Promise","resolve","reject","success","creds","data","logout","then","me","console","log","user","catch","err","error","refresh","token","getState","auth","isAuthenticated"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,MAA/B,QAA4C,WAA5C;AACA,SAAQC,KAAR,QAAoB,aAApB;;AAEA,MAAMC,KAAK,GAAGC,QAAQ,IAAIC,QAAQ,IAAI;AAClC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIJ,QAAQ,CAACK,OAAb,EAAsB;AAAA,YACLC,KADK,GACIN,QADJ,CACXO,IADW;AAElBN,MAAAA,QAAQ,CAACN,SAAS,CAACW,KAAD,CAAV,CAAR;AACA,aAAOH,OAAO,EAAd;AACH,KAJD,MAIO;AACH,aAAOC,MAAM,EAAb;AACH;AACJ,GARM,CAAP;AASH,CAVD;;AAYA,MAAMI,MAAM,GAAG,MAAMP,QAAQ,IAAI;AAC7B,SAAOH,KAAK,CAAC,kBAAD,EAAqB,MAArB,CAAL,CAAkCW,IAAlC,CAAuC,MAAM;AAChDR,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACH,GAFM,CAAP;AAGH,CAJD;;AAMA,MAAMc,EAAE,GAAG,MAAMT,QAAQ,IAAI;AACzBU,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,SAAOd,KAAK,CAAC,cAAD,EAAiB,MAAjB,CAAL,CACFW,IADE,CACII,IAAD,IAAU;AACZZ,IAAAA,QAAQ,CAACJ,MAAM,CAACgB,IAAD,CAAP,CAAR;AACH,GAHE,EAIFC,KAJE,CAIIC,GAAG,IAAI;AACVJ,IAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACH,GANE,CAAP;AAOH,CATD;;AAWA,MAAME,OAAO,GAAIC,KAAD,IAAW,CAACjB,QAAD,EAAWkB,QAAX,KAAwB;AAC/C,MAAI,CAAC,CAACD,KAAF,IAAW,CAACC,QAAQ,GAAGC,IAAX,CAAgBC,eAAhC,EAAiD;AAC7C;AACA,WAAOvB,KAAK,CAAC,mBAAD,EAAsB,MAAtB,CAAL,CAAmCW,IAAnC,CAAyCF,IAAD,IAAU;AACrD,aAAOG,EAAE,EAAT;AACH,KAFM,CAAP;AAGH,GALD,MAKO;AACH,WAAOF,MAAM,EAAb;AACH;AACJ,CATD;;AAWA,SACIT,KADJ,EACWS,MADX,EACmBE,EADnB,EACuBO,OADvB","sourcesContent":["import {authLogin, authLogout, authMe} from \"./actions\";\r\nimport {fetch} from \"../../utils\";\r\n\r\nconst login = response => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        if (response.success) {\r\n            const {data: creds} = response\r\n            dispatch(authLogin(creds));\r\n            return resolve()\r\n        } else {\r\n            return reject()\r\n        }\r\n    })\r\n}\r\n\r\nconst logout = () => dispatch => {\r\n    return fetch('/api/auth/logout', \"POST\").then(() => {\r\n        dispatch(authLogout())\r\n    })\r\n}\r\n\r\nconst me = () => dispatch => {\r\n    console.log('h')\r\n    return fetch('/api/auth/me', \"POST\")\r\n        .then((user) => {\r\n            dispatch(authMe(user))\r\n        })\r\n        .catch(err => {\r\n            console.error(err)\r\n        })\r\n}\r\n\r\nconst refresh = (token) => (dispatch, getState) => {\r\n    if (!!token && !getState().auth.isAuthenticated) {\r\n        // если данные о пользователе в стейте, тогда запрос за новым токеном (в теле - старый),\r\n        return fetch('/api/auth/refresh', \"POST\").then((data) => {\r\n            return me()\r\n        })\r\n    } else {\r\n        return logout()\r\n    }\r\n}\r\n\r\nexport {\r\n    login, logout, me, refresh\r\n}"]},"metadata":{},"sourceType":"module"}