{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { withFormik } from \"formik\";\nimport { checkOnMax, checkOnMin, checkOnRequired } from \"../../../store/utils/form_helpers\";\nimport OrderForm from \"./Form\";\n\nconst getDefaultValues = (_ref) => {\n  let typeVariant = _ref.typeVariant,\n      ph = _ref.ph,\n      state = _objectWithoutProperties(_ref, [\"typeVariant\", \"ph\"]);\n\n  let values = {\n    typeVariant: typeVariant === 1 ? '' : typeVariant === 2 ? \"long\" : \"short\",\n    ph: {}\n  }; // inputs\n\n  Object.keys(ph).forEach(keyName => {\n    values.ph[keyName] = '';\n  });\n  return values;\n};\n\nconst EnhancedForm = withFormik({\n  mapPropsToValues: props => getDefaultValues(props.orderFormData),\n  // Custom sync validation\n  validate: (values, _ref2) => {\n    let _ref2$orderFormData = _ref2.orderFormData,\n        ph = _ref2$orderFormData.ph,\n        typeVariant = _ref2$orderFormData.typeVariant,\n        props = _objectWithoutProperties(_ref2, [\"orderFormData\"]);\n\n    const errors = {};\n    const rules = {}; // Object.keys(ph).forEach(keyName => {\n    //     rules[keyName] = [keyName].rules\n    // })\n    //\n    // if (typeVariant === 1 && !values.typeVariant) errors[\"typeVariant\"] = \"Required\"\n    //\n    // Object.keys(rules).forEach(keyName => {\n    //     if (/required/ig.test(rules[keyName]) && !checkOnRequired(values[keyName])) {\n    //         errors[keyName] = 'Required'\n    //     }\n    //     if (/min:\\d{1,2}/ig.test(rules[keyName])) {\n    //         let rule = rules[keyName].match(/min:\\d{1,2}/ig)[0]\n    //         let limit = +rule.match(/\\d+/ig)[0]\n    //         if (!checkOnMin(values[keyName], limit)) {\n    //             errors[keyName] = `Minimum length is ${limit}`\n    //         }\n    //     }\n    //     if (/max:\\d{1,2}/ig.test(rules[keyName])) {\n    //         let rule = rules[keyName].match(/max:\\d{1,2}/ig)[0]\n    //         let limit = +rule.match(/\\d+/ig)[0]\n    //         if (!checkOnMax(values[keyName], limit)) {\n    //             errors[keyName] = `Maximum length is ${limit}`\n    //         }\n    //     }\n    // })\n\n    return errors;\n  },\n  handleSubmit: (values, _ref3) => {\n    let setSubmitting = _ref3.setSubmitting,\n        props = _objectWithoutProperties(_ref3, [\"setSubmitting\"]);\n\n    setSubmitting(true);\n    console.log(JSON.stringify(values, null, 2));\n    setSubmitting(false); // props.props.history.push(`${props.props.location.pathname}/success`)\n  },\n  enableReinitialize: true,\n  displayName: 'OrderForm'\n})(OrderForm);\nexport default EnhancedForm;","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/pages/CompOrderForm/EnhancedForm.js"],"names":["withFormik","checkOnMax","checkOnMin","checkOnRequired","OrderForm","getDefaultValues","typeVariant","ph","state","values","Object","keys","forEach","keyName","EnhancedForm","mapPropsToValues","props","orderFormData","validate","errors","rules","handleSubmit","setSubmitting","console","log","JSON","stringify","enableReinitialize","displayName"],"mappings":";AAAA,SAAQA,UAAR,QAAyB,QAAzB;AACA,SAAQC,UAAR,EAAoBC,UAApB,EAAgCC,eAAhC,QAAsD,mCAAtD;AACA,OAAOC,SAAP,MAAsB,QAAtB;;AAEA,MAAMC,gBAAgB,GAAG,UAAiC;AAAA,MAA/BC,WAA+B,QAA/BA,WAA+B;AAAA,MAAlBC,EAAkB,QAAlBA,EAAkB;AAAA,MAAXC,KAAW;;AACtD,MAAIC,MAAM,GAAG;AACTH,IAAAA,WAAW,EAAEA,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBA,WAAW,KAAK,CAAhB,GAAoB,MAApB,GAA6B,OAD1D;AAETC,IAAAA,EAAE,EAAE;AAFK,GAAb,CADsD,CAMtD;;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYJ,EAAZ,EAAgBK,OAAhB,CAAwBC,OAAO,IAAI;AAC/BJ,IAAAA,MAAM,CAACF,EAAP,CAAUM,OAAV,IAAqB,EAArB;AACH,GAFD;AAIA,SAAOJ,MAAP;AACH,CAZD;;AAcA,MAAMK,YAAY,GAAGd,UAAU,CAAC;AAC5Be,EAAAA,gBAAgB,EAAGC,KAAD,IAAYX,gBAAgB,CAACW,KAAK,CAACC,aAAP,CADlB;AAG5B;AACAC,EAAAA,QAAQ,EAAE,CAACT,MAAD,YAA0D;AAAA,oCAAhDQ,aAAgD;AAAA,QAAhCV,EAAgC,uBAAhCA,EAAgC;AAAA,QAA5BD,WAA4B,uBAA5BA,WAA4B;AAAA,QAAXU,KAAW;;AAChE,UAAMG,MAAM,GAAG,EAAf;AACA,UAAMC,KAAK,GAAG,EAAd,CAFgE,CAIhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAOD,MAAP;AACH,GAnC2B;AAqC5BE,EAAAA,YAAY,EAAE,CAACZ,MAAD,YAAuC;AAAA,QAA7Ba,aAA6B,SAA7BA,aAA6B;AAAA,QAAXN,KAAW;;AACjDM,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAejB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACAa,IAAAA,aAAa,CAAC,KAAD,CAAb,CAHiD,CAIjD;AACH,GA1C2B;AA4C5BK,EAAAA,kBAAkB,EAAE,IA5CQ;AA8C5BC,EAAAA,WAAW,EAAE;AA9Ce,CAAD,CAAV,CA+ClBxB,SA/CkB,CAArB;AAiDA,eAAeU,YAAf","sourcesContent":["import {withFormik} from \"formik\";\r\nimport {checkOnMax, checkOnMin, checkOnRequired} from \"../../../store/utils/form_helpers\";\r\nimport OrderForm from \"./Form\";\r\n\r\nconst getDefaultValues = ({typeVariant, ph, ...state}) => {\r\n    let values = {\r\n        typeVariant: typeVariant === 1 ? '' : typeVariant === 2 ? \"long\" : \"short\",\r\n        ph: {}\r\n    }\r\n\r\n    // inputs\r\n    Object.keys(ph).forEach(keyName => {\r\n        values.ph[keyName] = ''\r\n    })\r\n\r\n    return values\r\n}\r\n\r\nconst EnhancedForm = withFormik({\r\n    mapPropsToValues: (props) => (getDefaultValues(props.orderFormData)),\r\n\r\n    // Custom sync validation\r\n    validate: (values, {orderFormData: {ph, typeVariant}, ...props}) => {\r\n        const errors = {};\r\n        const rules = {}\r\n\r\n        // Object.keys(ph).forEach(keyName => {\r\n        //     rules[keyName] = [keyName].rules\r\n        // })\r\n        //\r\n        // if (typeVariant === 1 && !values.typeVariant) errors[\"typeVariant\"] = \"Required\"\r\n        //\r\n        // Object.keys(rules).forEach(keyName => {\r\n        //     if (/required/ig.test(rules[keyName]) && !checkOnRequired(values[keyName])) {\r\n        //         errors[keyName] = 'Required'\r\n        //     }\r\n        //     if (/min:\\d{1,2}/ig.test(rules[keyName])) {\r\n        //         let rule = rules[keyName].match(/min:\\d{1,2}/ig)[0]\r\n        //         let limit = +rule.match(/\\d+/ig)[0]\r\n        //         if (!checkOnMin(values[keyName], limit)) {\r\n        //             errors[keyName] = `Minimum length is ${limit}`\r\n        //         }\r\n        //     }\r\n        //     if (/max:\\d{1,2}/ig.test(rules[keyName])) {\r\n        //         let rule = rules[keyName].match(/max:\\d{1,2}/ig)[0]\r\n        //         let limit = +rule.match(/\\d+/ig)[0]\r\n        //         if (!checkOnMax(values[keyName], limit)) {\r\n        //             errors[keyName] = `Maximum length is ${limit}`\r\n        //         }\r\n        //     }\r\n        // })\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, {setSubmitting, ...props}) => {\r\n        setSubmitting(true);\r\n        console.log(JSON.stringify(values, null, 2));\r\n        setSubmitting(false);\r\n        // props.props.history.push(`${props.props.location.pathname}/success`)\r\n    },\r\n\r\n    enableReinitialize: true,\r\n\r\n    displayName: 'OrderForm',\r\n})(OrderForm)\r\n\r\nexport default EnhancedForm"]},"metadata":{},"sourceType":"module"}