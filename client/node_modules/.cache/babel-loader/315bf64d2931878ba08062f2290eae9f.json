{"ast":null,"code":"import axios from 'axios';\naxios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.withCredentials = true;\naxios.defaults.baseURL = \"http://localhost:8000\";\n\nconst fetch = (url, method, body) => {\n  const options = {\n    method,\n    headers: requestHeaders()\n  }; // console.log(body)\n\n  if (method === \"POST\") {\n    return axios.post(url, JSON.stringify(body), options).then(res => parseStatus(res.status, res.data)).catch(err => parseStatus(err.response.status, err.response.data));\n  }\n\n  if (method === \"GET\") {\n    return axios.get(url, options).then(res => parseStatus(res.status, res.data)).catch(err => parseStatus(err.response.status, err.response.data));\n  }\n};\n\nexport default fetch;\n\nfunction parseStatus(status, res) {\n  return new Promise((resolve, reject) => {\n    if (status >= 200 && status < 300) {\n      resolve(res);\n    } else {\n      reject({\n        status,\n        error: res\n      });\n    }\n  });\n}\n\nfunction requestHeaders() {\n  const headers = {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  };\n  let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n\n  if (!!token) {\n    headers['X-CSRF-TOKEN'] = token.content;\n  }\n\n  return headers;\n}","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/store/utils/fetch.js"],"names":["axios","defaults","headers","common","withCredentials","baseURL","fetch","url","method","body","options","requestHeaders","post","JSON","stringify","then","res","parseStatus","status","data","catch","err","response","get","Promise","resolve","reject","error","token","document","head","querySelector","content"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,kBAA9B,IAAoD,gBAApD;AACAH,KAAK,CAACC,QAAN,CAAeG,eAAf,GAAiC,IAAjC;AACAJ,KAAK,CAACC,QAAN,CAAeI,OAAf,GAAyB,uBAAzB;;AAEA,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,KAAuB;AAEjC,QAAMC,OAAO,GAAG;AACZF,IAAAA,MADY;AAEZN,IAAAA,OAAO,EAAES,cAAc;AAFX,GAAhB,CAFiC,CAMjC;;AAEA,MAAIH,MAAM,KAAK,MAAf,EAAuB;AACnB,WAAOR,KAAK,CAACY,IAAN,CAAWL,GAAX,EAAgBM,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAhB,EAAsCC,OAAtC,EACFK,IADE,CACGC,GAAG,IAAIC,WAAW,CAACD,GAAG,CAACE,MAAL,EAAaF,GAAG,CAACG,IAAjB,CADrB,EAEFC,KAFE,CAEIC,GAAG,IAAIJ,WAAW,CAACI,GAAG,CAACC,QAAJ,CAAaJ,MAAd,EAAsBG,GAAG,CAACC,QAAJ,CAAaH,IAAnC,CAFtB,CAAP;AAGH;;AACD,MAAIX,MAAM,KAAK,KAAf,EAAsB;AAClB,WAAOR,KAAK,CAACuB,GAAN,CAAUhB,GAAV,EAAeG,OAAf,EACFK,IADE,CACGC,GAAG,IAAIC,WAAW,CAACD,GAAG,CAACE,MAAL,EAAaF,GAAG,CAACG,IAAjB,CADrB,EAEFC,KAFE,CAEIC,GAAG,IAAIJ,WAAW,CAACI,GAAG,CAACC,QAAJ,CAAaJ,MAAd,EAAsBG,GAAG,CAACC,QAAJ,CAAaH,IAAnC,CAFtB,CAAP;AAGH;AACJ,CAlBD;;AAoBA,eAAeb,KAAf;;AAEA,SAASW,WAAT,CAAqBC,MAArB,EAA6BF,GAA7B,EAAkC;AAC9B,SAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIR,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAA9B,EAAmC;AAC/BO,MAAAA,OAAO,CAACT,GAAD,CAAP;AACH,KAFD,MAEO;AACHU,MAAAA,MAAM,CAAC;AAACR,QAAAA,MAAD;AAASS,QAAAA,KAAK,EAAEX;AAAhB,OAAD,CAAN;AACH;AACJ,GANM,CAAP;AAOH;;AAED,SAASL,cAAT,GAA0B;AACtB,QAAMT,OAAO,GAAG;AACZ,cAAU,kBADE;AAEZ,oBAAgB;AAFJ,GAAhB;AAKA,MAAI0B,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcC,aAAd,CAA4B,yBAA5B,CAAZ;;AACA,MAAI,CAAC,CAACH,KAAN,EAAa;AACT1B,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B0B,KAAK,CAACI,OAAhC;AACH;;AAED,SAAO9B,OAAP;AACH","sourcesContent":["import axios from 'axios'\r\n\r\naxios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.baseURL = \"http://localhost:8000\";\r\n\r\nconst fetch = (url, method, body) => {\r\n\r\n    const options = {\r\n        method,\r\n        headers: requestHeaders(),\r\n    };\r\n    // console.log(body)\r\n\r\n    if (method === \"POST\") {\r\n        return axios.post(url, JSON.stringify(body), options)\r\n            .then(res => parseStatus(res.status, res.data))\r\n            .catch(err => parseStatus(err.response.status, err.response.data))\r\n    }\r\n    if (method === \"GET\") {\r\n        return axios.get(url, options)\r\n            .then(res => parseStatus(res.status, res.data))\r\n            .catch(err => parseStatus(err.response.status, err.response.data))\r\n    }\r\n};\r\n\r\nexport default fetch\r\n\r\nfunction parseStatus(status, res) {\r\n    return new Promise((resolve, reject) => {\r\n        if (status >= 200 && status < 300) {\r\n            resolve(res);\r\n        } else {\r\n            reject({status, error: res});\r\n        }\r\n    });\r\n}\r\n\r\nfunction requestHeaders() {\r\n    const headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n\r\n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\r\n    if (!!token) {\r\n        headers['X-CSRF-TOKEN'] = token.content;\r\n    }\r\n\r\n    return headers\r\n}"]},"metadata":{},"sourceType":"module"}