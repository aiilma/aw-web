{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\Projects\\\\php\\\\Laravel\\\\aw.client\\\\src\\\\views\\\\layout\\\\header\\\\LoginButton.js\";\nimport React, { useEffect, useRef } from 'react';\nimport Button from \"@material-ui/core/Button\"; // Hook\n\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    // On\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\n;\n\nfunction LoginButton(_ref) {\n  let login = _ref.login,\n      props = _objectWithoutProperties(_ref, [\"login\"]);\n\n  const onHandleLogin = () => {\n    const popupWindow = window.open(process.env.REACT_APP_API_URL + '/api/auth/steam/handle', '', 'width=800, height=600');\n    if (window.focus) popupWindow.focus();\n  };\n\n  const loginSubmit = event => {\n    if (event.origin !== process.env.REACT_APP_API_URL) return;\n    const res = event.data.response; // props.login(res.data)\n\n    login(res.data);\n  };\n\n  useEffect(() => {\n    // subscribe event\n    window.addEventListener(\"message\", loginSubmit);\n    return () => {\n      // unsubscribe event\n      window.removeEventListener(\"messgae\", loginSubmit);\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    onClick: () => onHandleLogin(),\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\"));\n}\n\nexport default LoginButton;","map":{"version":3,"sources":["D:/Projects/php/Laravel/aw.client/src/views/layout/header/LoginButton.js"],"names":["React","useEffect","useRef","Button","useEventListener","eventName","handler","element","window","savedHandler","current","isSupported","addEventListener","eventListener","event","removeEventListener","LoginButton","login","props","onHandleLogin","popupWindow","open","process","env","REACT_APP_API_URL","focus","loginSubmit","origin","res","data","response"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAAO,GAAGC,MAAxD,EAA+D;AAC3D;AACA,QAAMC,YAAY,GAAGP,MAAM,EAA3B,CAF2D,CAI3D;AACA;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACH,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CACL,MAAM;AACF;AACA;AACA,UAAMU,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;AACA,QAAI,CAACD,WAAL,EAAkB,OAJhB,CAMF;;AACA,UAAME,aAAa,GAAGC,KAAK,IAAIL,YAAY,CAACC,OAAb,CAAqBI,KAArB,CAA/B,CAPE,CASF;;;AACAP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EAVE,CAYF;;AACA,WAAO,MAAM;AACTN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACH,KAFD;AAGH,GAjBI,EAkBL,CAACR,SAAD,EAAYE,OAAZ,CAlBK,CAkBgB;AAlBhB,GAAT;AAoBH;;AAAA;;AAED,SAASS,WAAT,OAAwC;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAARC,KAAQ;;AACpC,QAAMC,aAAa,GAAG,MAAM;AACxB,UAAMC,WAAW,GAAGZ,MAAM,CAACa,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,wBAA5C,EAAsE,EAAtE,EAA0E,uBAA1E,CAApB;AACA,QAAIhB,MAAM,CAACiB,KAAX,EACIL,WAAW,CAACK,KAAZ;AACP,GAJD;;AAMA,QAAMC,WAAW,GAAIZ,KAAD,IAAW;AAC3B,QAAIA,KAAK,CAACa,MAAN,KAAiBL,OAAO,CAACC,GAAR,CAAYC,iBAAjC,EAAoD;AADzB,UAEVI,GAFU,GAEHd,KAAK,CAACe,IAFH,CAEpBC,QAFoB,EAI3B;;AACAb,IAAAA,KAAK,CAACW,GAAG,CAACC,IAAL,CAAL;AACH,GAND;;AAQA5B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAO,IAAAA,MAAM,CAACI,gBAAP,CAAwB,SAAxB,EAAmCc,WAAnC;AACA,WAAO,MAAM;AACT;AACAlB,MAAAA,MAAM,CAACO,mBAAP,CAA2B,SAA3B,EAAsCW,WAAtC;AACH,KAHD;AAIH,GAPQ,EAON,EAPM,CAAT;AASA,SACI,0CACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMP,aAAa,EAApC;AAAwC,IAAA,KAAK,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,CADJ;AAKH;;AAED,eAAeH,WAAf","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// Hook\r\nfunction useEventListener(eventName, handler, element = window){\r\n    // Create a ref that stores handler\r\n    const savedHandler = useRef();\r\n\r\n    // Update ref.current value if handler changes.\r\n    // This allows our effect below to always get latest handler ...\r\n    // ... without us needing to pass it in effect deps array ...\r\n    // ... and potentially cause effect to re-run every render.\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Make sure element supports addEventListener\r\n            // On\r\n            const isSupported = element && element.addEventListener;\r\n            if (!isSupported) return;\r\n\r\n            // Create event listener that calls handler function stored in ref\r\n            const eventListener = event => savedHandler.current(event);\r\n\r\n            // Add event listener\r\n            element.addEventListener(eventName, eventListener);\r\n\r\n            // Remove event listener on cleanup\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element] // Re-run if eventName or element changes\r\n    );\r\n};\r\n\r\nfunction LoginButton({login, ...props}) {\r\n    const onHandleLogin = () => {\r\n        const popupWindow = window.open(process.env.REACT_APP_API_URL + '/api/auth/steam/handle', '', 'width=800, height=600');\r\n        if (window.focus)\r\n            popupWindow.focus()\r\n    }\r\n\r\n    const loginSubmit = (event) => {\r\n        if (event.origin !== process.env.REACT_APP_API_URL) return;\r\n        const {response: res} = event.data;\r\n\r\n        // props.login(res.data)\r\n        login(res.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        // subscribe event\r\n        window.addEventListener(\"message\", loginSubmit);\r\n        return () => {\r\n            // unsubscribe event\r\n            window.removeEventListener(\"messgae\", loginSubmit);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={() => onHandleLogin()} color=\"inherit\">Войти</Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoginButton"]},"metadata":{},"sourceType":"module"}